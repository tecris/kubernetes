#cloud-config

---
write-files:
  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?
  - __PROXY_LINE__path: /etc/systemd/system/docker.service.d/http-proxy.conf
    __PROXY_LINE__owner: core:core
    __PROXY_LINE__permissions: '0644'
    __PROXY_LINE__content: |
      __PROXY_LINE__[Service]
      __PROXY_LINE__Environment="HTTP_PROXY=__HTTP_PROXY__" "HTTPS_PROXY=__HTTPS_PROXY__" "NO_PROXY=__NO_PROXY__"

coreos:
  etcd2:
    name: __NAME__
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    advertise-client-urls: http://$public_ipv4:2379,http://$public_ipv4:4001
    initial-cluster-token: k8s_etcd
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    initial-cluster: __ETCD_SEED_CLUSTER__
    initial-cluster-state: new
  fleet:
    public-ip: $public_ipv4
    metadata: "role=master"
  flannel:
    interface: $public_ipv4
  units:
    - __PROXY_LINE__name: set-http-proxy.service
      __PROXY_LINE__command: start
      __PROXY_LINE__content: |
        __PROXY_LINE__[Unit]
        __PROXY_LINE__Description=Set HTTP proxy
        __PROXY_LINE__DefaultDependencies=no
        __PROXY_LINE__After=systemd-sysctl.service
        __PROXY_LINE__Before=sysinit.target
        __PROXY_LINE__[Service]
        __PROXY_LINE__Type=oneshot
        __PROXY_LINE__ExecStartPre=/usr/bin/systemctl set-environment HTTP_PROXY=__HTTP_PROXY__
        __PROXY_LINE__ExecStartPre=/usr/bin/systemctl set-environment HTTPS_PROXY=__HTTP_PROXY__
        __PROXY_LINE__ExecStartPre=/usr/bin/systemctl set-environment NO_PROXY=__NO_PROXY__
        __PROXY_LINE__ExecStartPre=/usr/bin/systemctl set-environment http_proxy=__HTTP_PROXY__
        __PROXY_LINE__ExecStartPre=/usr/bin/systemctl set-environment https_proxy=__HTTP_PROXY__
        __PROXY_LINE__ExecStart=/usr/bin/systemctl set-environment no_proxy=__NO_PROXY__
        __PROXY_LINE__[Install]
        __PROXY_LINE__WantedBy=multi-user.target
    - name: rpcbind.service
      enable: true
      command: start
    - name: rpc-statd.service
      enable: true
      command: start
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -P /opt/bin http://192.168.1.66/repo/iso/k8/__RELEASE__/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: docker-cache.service
      command: start
      content: |
        [Unit]
        Description=Docker cache proxy
        Requires=early-docker.service
        After=early-docker.service
        Before=early-docker.target
        [Service]
        Restart=always
        TimeoutStartSec=0
        RestartSec=5
        Environment="TMPDIR=/var/tmp/"
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        ExecStartPre=-/usr/bin/docker kill docker-registry
        ExecStartPre=-/usr/bin/docker rm docker-registry
        ExecStartPre=/usr/bin/docker pull quay.io/devops/docker-registry:latest
        # GUNICORN_OPTS is an workaround for
        # https://github.com/docker/docker-registry/issues/892
        ExecStart=/usr/bin/docker run --rm --net host --name docker-registry \
          -e STANDALONE=false \
          -e GUNICORN_OPTS=[--preload] \
          -e MIRROR_SOURCE=https://registry-1.docker.io \
          -e MIRROR_SOURCE_INDEX=https://index.docker.io \
          -e MIRROR_TAGS_CACHE_TTL=1800 \
          quay.io/devops/docker-registry:latest
    - name: fleet.service
      command: start
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
    - name: docker.service
      command: start
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that docker-cache is up and that flanneld finished
            # startup, otherwise containers won't land in flannel's network...
            Requires=docker-cache.service flanneld.service
            After=docker-cache.service flanneld.service
            [Service]
            Environment='DOCKER_OPTS=--registry-mirror=http://$private_ipv4:5000 --insecure-registry=192.168.1.66/24'
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd2.service docker-cache.service fleet.service docker.service flanneld.service
        After=etcd2.service docker-cache.service fleet.service docker.service flanneld.service
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -P /opt/bin http://192.168.1.66/repo/iso/k8/__RELEASE__/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStartPre=/opt/bin/wupiao $private_ipv4:2379/v2/machines
        ExecStart=/opt/bin/kube-apiserver \
          --service_account_key_file=/home/core/kube-serviceaccount.key \
          --service_account_lookup=false \
          --admission_control=NamespaceLifecycle,NamespaceAutoProvision,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota \
          --allow_privileged=true \
          --insecure_bind_address=0.0.0.0 \
          --insecure_port=8080 \
          --kubelet_https=true \
          --secure_port=6443 \
          --service-cluster-ip-range=10.100.0.0/16 \
          --etcd_servers=http://$private_ipv4:2379 \
          --public_address_override=$public_ipv4 \
          --cloud_provider=__CLOUDPROVIDER__ \
          --logtostderr=true \
          --runtime_config=api/v1
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -P /opt/bin http://192.168.1.66/repo/iso/k8/__RELEASE__/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStartPre=/opt/bin/wupiao $private_ipv4:8080
        ExecStart=/opt/bin/kube-controller-manager \
          --service_account_private_key_file=/home/core/kube-serviceaccount.key \
          --master=$private_ipv4:8080 \
          --cloud_provider=__CLOUDPROVIDER__ \
          --pod_eviction_timeout=30s \
          --node_milli_cpu=__NODE_CPUS__000 \
          --node_memory=__NODE_MEM__Mi \
          --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -P /opt/bin http://192.168.1.66/repo/iso/k8/__RELEASE__/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStartPre=/opt/bin/wupiao $private_ipv4:8080
        ExecStart=/opt/bin/kube-scheduler \
          --master=$private_ipv4:8080
        Restart=always
        RestartSec=10
  update:
    group: __CHANNEL__
    reboot-strategy: off
